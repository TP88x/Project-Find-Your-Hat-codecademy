const prompt = require('prompt-sync')({ sigint: true }); // This sends a SIGINT, or ‚Äúsignal interrupt‚Äù message indicating that a user wants to exit a program by press Crtl+c
const clear = require('clear-screen');//every turn clear the screen that meant you will not get new field in time you choose the direction
const hat = 'üëë';
const hole = 'üí£';
const fieldCharacter = '‚¨ú';
const pathCharacter = 'üë∫';
let fieldRange = 7 ; // ‡∏Ç‡∏ô‡∏≤‡∏î map ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏™‡πà 5 = ‡∏Å‡∏ß‡πâ‡∏≤‡∏á 5 ‡∏¢‡∏≤‡∏ß 5
let amounthole = 5; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å 
let randomRow,randomCol;

class Field {
  constructor(field = [[]]) {
    this.field = field;
    // this.positionX = 0; 
    // this.positionY = 0; 
    // this.field[0][0] = pathCharacter;
    this.endGame = false;
    this.print = print ;

  }
  playGame(print){
    randomRow = Math.floor(Math.random() * fieldRange);
    randomCol = Math.floor(Math.random() * fieldRange);
    this.field[randomRow][randomCol] = pathCharacter;
    this.positionX = randomCol; 
    this.positionY = randomRow; 
    // this.newMap();
    while(this.endGame === false){

        this.newMap();
        console.log(`X = ${this.positionX} || Y = ${this.positionY}`);
        const move = prompt('Welcome to the game which way are you going ? \nW=up S=down A=left D=right : ');
        this.field[this.positionX][this.positionY] = fieldCharacter;
        if (move.toLocaleUpperCase() === 'W')(this.positionX - 1) < fieldRange ? this.positionX : this.positionX -=1 ;  // W ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡πÅ‡∏Å‡∏ô X ‡∏Ç‡∏∂‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏µ‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏ï‡∏∑‡∏≠ this.positionX = 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ‡πÉ‡∏´‡πâ this.positionX -1
        if (move.toLocaleUpperCase() === 'A')(this.positionY - 1) < fieldRange ? this.positionY : this.positionY -=1 ;  // A ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡πÅ‡∏Å‡∏ô Y ‡∏ã‡πâ‡∏≤‡∏¢ ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏µ‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏ï‡∏∑‡∏≠ this.position‡πçY = 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ‡πÉ‡∏´‡πâ this.positionY -1
        if (move.toLocaleUpperCase() === 'S')(this.positionX + 1) < fieldRange ? this.positionX += 1 : this.positionX ; // S ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡πÅ‡∏Å‡∏ô X ‡∏•‡∏á ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ fieldRange ‡∏à‡∏∞ +1
        if (move.toLocaleUpperCase() === 'D')(this.positionY + 1) < fieldRange ? this.positionY += 1 : this.positionY ; // D ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡πÅ‡∏Å‡∏ô Y ‡∏Ç‡∏ß‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ fieldRange ‡∏à‡∏∞ +1
        if (this.field[this.positionX][this.positionY] === hole) {
            console.log('----- LOSE sorry you hit the trap -----');
            this.endGame = true;
        }
        if (this.field[this.positionX][this.positionY] === hat) {
            console.log('----- WIN Congratulations -----');
            this.endGame = true;
        }
        this.field[this.positionX][this.positionY] = pathCharacter; 
    }   
  }
  print() {
    clear();
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÇ‡∏´‡∏°‡∏î 3 ‡πÇ‡∏´‡∏°‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡πà‡∏ô

    // console.log('Select difficulty level:');
    // console.log('1. Easy');
    // console.log('2. Medium');
    // console.log('3. Hard');
    // const choice = prompt('Enter the number of your choice: ');

    // switch (choice) {
    //   case '1':
    //     fieldRange = 5;
    //     amounthole = (fieldRange*fieldRange)*0.3;
    //     break;
    //   case '2':
    //     fieldRange = 10;
    //     amounthole = (fieldRange*fieldRange)*0.3;
    //     break;
    //   case '3':
    //     fieldRange = 15;
    //     amounthole = (fieldRange*fieldRange)*0.3;
    //     break;
    //   default:
    //     console.log('Invalid choice. Using default settings.');
    // }

    // field before add hole and hat
    let fieldAdd = [];  // ‡∏ó‡∏≥ array 2‡∏°‡∏¥‡∏ï‡∏¥ ‡∏™‡∏£‡πâ‡∏≤‡∏á map
    for(let i = 0; i < fieldRange; i++ ) {
        fieldAdd.push([]);
        for(let n = 0; n < fieldRange; n++) {
            fieldAdd[i].push(fieldCharacter);
        }
    }
    // add hole and hat on field
    function addHatnhole(field) {
        const row = field.length;
        const col = field.length;
        
        for(let i = 0; i < amounthole; i++) {
            do {
                randomRow = Math.floor(Math.random() * row);
                randomCol = Math.floor(Math.random() * col);
            } while (field[randomRow][randomCol] === hole || randomRow === 0 && randomCol === 0 || randomRow === 1 && randomCol === 0 || randomRow === 0 && randomCol === 1 || randomRow === 1 && randomCol === 1);
              
            field[randomRow][randomCol] = hole;
        }    
            do {
                randomRow = Math.floor(Math.random() * row);
                randomCol = Math.floor(Math.random() * col);
            } while (field[randomRow][randomCol] === hat || randomRow === 0 && randomCol === 0)

            field[randomRow][randomCol] = hat;


        return field;
    }
    return addHatnhole(fieldAdd) 
  }
  newMap(){
    clear();
    console.log(this.field.map(row => row.join('')).join('\n'));
  }
}
// const nPrint = new Field();
// Play !!!
const playField = new Field();
playField.playGame()





//‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏Å ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏°‡∏ü‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà ‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏Å ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß  ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ pathCharacter ‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏°‡∏ü ‡∏ú‡∏°‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å print ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ playField ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö
//‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πá‡∏ó‡∏≥‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ ‡πÄ‡∏î‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏°‡∏ü‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏∞‡∏•‡∏∏‡πÅ‡∏°‡∏ü ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá ‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏û‡πâ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏°‡∏ß‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏ô‡∏∞
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏´‡∏°‡∏î ‡πÇ‡∏î‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î 


